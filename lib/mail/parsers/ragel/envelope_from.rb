
# line 1 "ragel/envelope_from.rl"

# line 18 "ragel/envelope_from.rl"


module Mail
  module Parsers
    module Ragel
      class MessageIdsParser
        def initialize
          
# line 14 "ragel/envelope_from.rb"
class << self
	attr_accessor :_envelope_from_actions
	private :_envelope_from_actions, :_envelope_from_actions=
end
self._envelope_from_actions = [
	0, 1, 0, 1, 1
]

class << self
	attr_accessor :_envelope_from_key_offsets
	private :_envelope_from_key_offsets, :_envelope_from_key_offsets=
end
self._envelope_from_key_offsets = [
	0, 0, 18, 19, 21, 44, 55, 56, 
	58, 67, 68, 70, 72, 91, 92, 94, 
	117, 127, 128, 130, 139, 140, 142, 144, 
	162, 163, 165, 174, 175, 177, 179, 180, 
	181, 182, 191, 193, 194, 195, 201, 202, 
	204, 213, 214, 216, 218, 224, 228, 229, 
	231, 237, 238, 240, 249, 250, 252, 254, 
	256, 261, 262, 264, 273, 274, 276, 278, 
	284, 285, 287, 296, 297, 299, 301, 303, 
	308, 309, 311, 318, 319, 321, 330, 331, 
	333, 335, 337, 338, 340, 349, 350, 352, 
	354, 360, 361, 363, 372, 373, 375, 377, 
	379, 383, 384, 386, 392, 393, 395, 404, 
	405, 407, 409, 418, 419, 421, 423, 432, 
	433, 435, 437, 446, 447, 449, 451, 452, 
	453, 454, 455, 456, 458, 459, 461, 462, 
	464, 465, 466, 467, 468, 469, 470, 471, 
	472, 474, 475, 477, 478, 479, 480, 481, 
	505, 529, 554, 579, 603, 627, 650, 665, 
	667, 669, 672, 696, 720, 744, 768, 792, 
	801, 802, 804, 806, 815, 816, 818, 820, 
	829, 830, 832, 841, 842, 844, 846, 870, 
	894, 919, 944, 968, 992, 1015, 1031, 1055, 
	1079, 1103, 1127, 1151, 1161, 1168, 1169, 1171, 
	1173, 1183, 1184, 1186, 1195, 1196, 1198, 1200, 
	1206
]

class << self
	attr_accessor :_envelope_from_trans_keys
	private :_envelope_from_trans_keys, :_envelope_from_trans_keys=
end
self._envelope_from_trans_keys = [
	9, 13, 32, 34, 40, 45, 61, 63, 
	33, 39, 42, 43, 47, 57, 65, 90, 
	94, 126, 10, 9, 32, 9, 13, 32, 
	33, 40, 46, 61, 64, 70, 77, 83, 
	84, 87, 35, 39, 42, 43, 45, 57, 
	63, 90, 94, 126, 9, 13, 32, 40, 
	46, 64, 70, 77, 83, 84, 87, 10, 
	9, 32, 13, 41, 92, 1, 9, 11, 
	39, 42, 127, 10, 9, 32, -128, -1, 
	9, 13, 32, 33, 40, 45, 61, 63, 
	91, 35, 39, 42, 43, 47, 57, 65, 
	90, 94, 126, 10, 9, 32, 9, 13, 
	32, 33, 40, 46, 61, 63, 70, 77, 
	83, 84, 87, 35, 39, 42, 43, 45, 
	57, 65, 90, 94, 126, 9, 13, 32, 
	40, 46, 70, 77, 83, 84, 87, 10, 
	9, 32, 13, 41, 92, 1, 9, 11, 
	39, 42, 127, 10, 9, 32, 0, 127, 
	9, 13, 32, 33, 40, 45, 61, 63, 
	35, 39, 42, 43, 47, 57, 65, 90, 
	94, 126, 10, 9, 32, 13, 41, 92, 
	1, 9, 11, 39, 42, 127, 10, 9, 
	32, -128, -1, 114, 105, 32, 32, 65, 
	68, 70, 74, 77, 78, 79, 83, 112, 
	117, 114, 32, 9, 13, 32, 40, 48, 
	57, 10, 9, 32, 13, 41, 92, 1, 
	9, 11, 39, 42, 127, 10, 9, 32, 
	0, 127, 9, 13, 32, 40, 48, 57, 
	9, 13, 32, 40, 10, 9, 32, 9, 
	13, 32, 40, 48, 57, 10, 9, 32, 
	13, 41, 92, 1, 9, 11, 39, 42, 
	127, 10, 9, 32, 0, 127, 48, 57, 
	9, 13, 32, 40, 58, 10, 9, 32, 
	13, 41, 92, 1, 9, 11, 39, 42, 
	127, 10, 9, 32, 0, 127, 9, 13, 
	32, 40, 48, 57, 10, 9, 32, 13, 
	41, 92, 1, 9, 11, 39, 42, 127, 
	10, 9, 32, -128, -1, 48, 57, 9, 
	13, 32, 40, 58, 10, 9, 32, 9, 
	13, 32, 40, 58, 48, 57, 10, 9, 
	32, 13, 41, 92, 1, 9, 11, 39, 
	42, 127, 10, 9, 32, -128, -1, 48, 
	57, 10, 9, 32, 13, 41, 92, 1, 
	9, 11, 39, 42, 127, 10, 9, 32, 
	0, 127, 9, 13, 32, 40, 48, 57, 
	10, 9, 32, 13, 41, 92, 1, 9, 
	11, 39, 42, 127, 10, 9, 32, -128, 
	-1, 48, 57, 9, 13, 32, 40, 10, 
	9, 32, 9, 13, 32, 40, 48, 57, 
	10, 9, 32, 13, 41, 92, 1, 9, 
	11, 39, 42, 127, 10, 9, 32, -128, 
	-1, 13, 41, 92, 1, 9, 11, 39, 
	42, 127, 10, 9, 32, 0, 127, 13, 
	41, 92, 1, 9, 11, 39, 42, 127, 
	10, 9, 32, -128, -1, 13, 41, 92, 
	1, 9, 11, 39, 42, 127, 10, 9, 
	32, 0, 127, 103, 101, 99, 101, 98, 
	97, 117, 110, 108, 110, 97, 114, 121, 
	111, 118, 99, 116, 101, 112, 111, 110, 
	97, 117, 116, 104, 117, 117, 101, 101, 
	100, 9, 13, 32, 33, 40, 46, 61, 
	63, 70, 77, 83, 84, 87, 114, 35, 
	39, 42, 43, 45, 57, 65, 90, 94, 
	126, 9, 13, 32, 33, 40, 46, 61, 
	63, 70, 77, 83, 84, 87, 111, 35, 
	39, 42, 43, 45, 57, 65, 90, 94, 
	126, 9, 13, 32, 33, 40, 46, 61, 
	63, 70, 77, 83, 84, 87, 97, 117, 
	35, 39, 42, 43, 45, 57, 65, 90, 
	94, 126, 9, 13, 32, 33, 40, 46, 
	61, 63, 70, 77, 83, 84, 87, 104, 
	117, 35, 39, 42, 43, 45, 57, 65, 
	90, 94, 126, 9, 13, 32, 33, 40, 
	46, 61, 63, 70, 77, 83, 84, 87, 
	101, 35, 39, 42, 43, 45, 57, 65, 
	90, 94, 126, 9, 13, 32, 33, 40, 
	46, 61, 63, 70, 77, 83, 84, 87, 
	100, 35, 39, 42, 43, 45, 57, 65, 
	90, 94, 126, 9, 13, 32, 33, 40, 
	46, 61, 63, 70, 77, 83, 84, 87, 
	35, 39, 42, 43, 45, 57, 65, 90, 
	94, 126, 9, 13, 32, 40, 46, 65, 
	68, 70, 74, 77, 78, 79, 83, 84, 
	87, 101, 114, 97, 111, 97, 101, 117, 
	9, 13, 32, 33, 40, 46, 61, 63, 
	70, 77, 83, 84, 87, 117, 35, 39, 
	42, 43, 45, 57, 65, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 63, 
	70, 77, 83, 84, 87, 101, 35, 39, 
	42, 43, 45, 57, 65, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 63, 
	70, 77, 83, 84, 87, 116, 35, 39, 
	42, 43, 45, 57, 65, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 63, 
	70, 77, 83, 84, 87, 110, 35, 39, 
	42, 43, 45, 57, 65, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 63, 
	70, 77, 83, 84, 87, 105, 35, 39, 
	42, 43, 45, 57, 65, 90, 94, 126, 
	13, 41, 92, 1, 9, 11, 39, 42, 
	127, 10, 9, 32, -128, -1, 13, 92, 
	93, 1, 9, 11, 90, 94, 127, 10, 
	9, 32, -128, -1, 9, 13, 32, 40, 
	70, 77, 83, 84, 87, 10, 9, 32, 
	13, 41, 92, 1, 9, 11, 39, 42, 
	127, 10, 9, 32, 0, 127, 9, 13, 
	32, 33, 40, 46, 61, 64, 70, 77, 
	83, 84, 87, 114, 35, 39, 42, 43, 
	45, 57, 63, 90, 94, 126, 9, 13, 
	32, 33, 40, 46, 61, 64, 70, 77, 
	83, 84, 87, 111, 35, 39, 42, 43, 
	45, 57, 63, 90, 94, 126, 9, 13, 
	32, 33, 40, 46, 61, 64, 70, 77, 
	83, 84, 87, 97, 117, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 104, 117, 35, 39, 
	42, 43, 45, 57, 63, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 64, 
	70, 77, 83, 84, 87, 101, 35, 39, 
	42, 43, 45, 57, 63, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 64, 
	70, 77, 83, 84, 87, 100, 35, 39, 
	42, 43, 45, 57, 63, 90, 94, 126, 
	9, 13, 32, 33, 40, 46, 61, 64, 
	70, 77, 83, 84, 87, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 40, 46, 64, 65, 68, 70, 
	74, 77, 78, 79, 83, 84, 87, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 117, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 101, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 116, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 110, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 33, 40, 46, 61, 64, 70, 
	77, 83, 84, 87, 105, 35, 39, 42, 
	43, 45, 57, 63, 90, 94, 126, 9, 
	13, 32, 92, 1, 8, 11, 33, 35, 
	127, 13, 34, 92, 1, 9, 11, 127, 
	10, 9, 32, -128, -1, 9, 13, 32, 
	92, 1, 8, 11, 33, 35, 127, 10, 
	9, 32, 13, 41, 92, 1, 9, 11, 
	39, 42, 127, 10, 9, 32, -128, -1, 
	9, 13, 32, 40, 48, 57, 9, 13, 
	32, 40, 0
]

class << self
	attr_accessor :_envelope_from_single_lengths
	private :_envelope_from_single_lengths, :_envelope_from_single_lengths=
end
self._envelope_from_single_lengths = [
	0, 8, 1, 2, 13, 11, 1, 2, 
	3, 1, 2, 0, 9, 1, 2, 13, 
	10, 1, 2, 3, 1, 2, 0, 8, 
	1, 2, 3, 1, 2, 0, 1, 1, 
	1, 9, 2, 1, 1, 4, 1, 2, 
	3, 1, 2, 0, 4, 4, 1, 2, 
	4, 1, 2, 3, 1, 2, 0, 0, 
	5, 1, 2, 3, 1, 2, 0, 4, 
	1, 2, 3, 1, 2, 0, 0, 5, 
	1, 2, 5, 1, 2, 3, 1, 2, 
	0, 0, 1, 2, 3, 1, 2, 0, 
	4, 1, 2, 3, 1, 2, 0, 0, 
	4, 1, 2, 4, 1, 2, 3, 1, 
	2, 0, 3, 1, 2, 0, 3, 1, 
	2, 0, 3, 1, 2, 0, 1, 1, 
	1, 1, 1, 2, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 2, 1, 1, 1, 1, 14, 
	14, 15, 15, 14, 14, 13, 15, 2, 
	2, 3, 14, 14, 14, 14, 14, 3, 
	1, 2, 0, 3, 1, 2, 0, 9, 
	1, 2, 3, 1, 2, 0, 14, 14, 
	15, 15, 14, 14, 13, 16, 14, 14, 
	14, 14, 14, 4, 3, 1, 2, 0, 
	4, 1, 2, 3, 1, 2, 0, 4, 
	4
]

class << self
	attr_accessor :_envelope_from_range_lengths
	private :_envelope_from_range_lengths, :_envelope_from_range_lengths=
end
self._envelope_from_range_lengths = [
	0, 5, 0, 0, 5, 0, 0, 0, 
	3, 0, 0, 1, 5, 0, 0, 5, 
	0, 0, 0, 3, 0, 0, 1, 5, 
	0, 0, 3, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	3, 0, 0, 1, 1, 0, 0, 0, 
	1, 0, 0, 3, 0, 0, 1, 1, 
	0, 0, 0, 3, 0, 0, 1, 1, 
	0, 0, 3, 0, 0, 1, 1, 0, 
	0, 0, 1, 0, 0, 3, 0, 0, 
	1, 1, 0, 0, 3, 0, 0, 1, 
	1, 0, 0, 3, 0, 0, 1, 1, 
	0, 0, 0, 1, 0, 0, 3, 0, 
	0, 1, 3, 0, 0, 1, 3, 0, 
	0, 1, 3, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	5, 5, 5, 5, 5, 5, 0, 0, 
	0, 0, 5, 5, 5, 5, 5, 3, 
	0, 0, 1, 3, 0, 0, 1, 0, 
	0, 0, 3, 0, 0, 1, 5, 5, 
	5, 5, 5, 5, 5, 0, 5, 5, 
	5, 5, 5, 3, 2, 0, 0, 1, 
	3, 0, 0, 3, 0, 0, 1, 1, 
	0
]

class << self
	attr_accessor :_envelope_from_index_offsets
	private :_envelope_from_index_offsets, :_envelope_from_index_offsets=
end
self._envelope_from_index_offsets = [
	0, 0, 14, 16, 19, 38, 50, 52, 
	55, 62, 64, 67, 69, 84, 86, 89, 
	108, 119, 121, 124, 131, 133, 136, 138, 
	152, 154, 157, 164, 166, 169, 171, 173, 
	175, 177, 187, 190, 192, 194, 200, 202, 
	205, 212, 214, 217, 219, 225, 230, 232, 
	235, 241, 243, 246, 253, 255, 258, 260, 
	262, 268, 270, 273, 280, 282, 285, 287, 
	293, 295, 298, 305, 307, 310, 312, 314, 
	320, 322, 325, 332, 334, 337, 344, 346, 
	349, 351, 353, 355, 358, 365, 367, 370, 
	372, 378, 380, 383, 390, 392, 395, 397, 
	399, 404, 406, 409, 415, 417, 420, 427, 
	429, 432, 434, 441, 443, 446, 448, 455, 
	457, 460, 462, 469, 471, 474, 476, 478, 
	480, 482, 484, 486, 489, 491, 494, 496, 
	499, 501, 503, 505, 507, 509, 511, 513, 
	515, 518, 520, 523, 525, 527, 529, 531, 
	551, 571, 592, 613, 633, 653, 672, 688, 
	691, 694, 698, 718, 738, 758, 778, 798, 
	805, 807, 810, 812, 819, 821, 824, 826, 
	836, 838, 841, 848, 850, 853, 855, 875, 
	895, 916, 937, 957, 977, 996, 1013, 1033, 
	1053, 1073, 1093, 1113, 1121, 1127, 1129, 1132, 
	1134, 1142, 1144, 1147, 1154, 1156, 1159, 1161, 
	1167
]

class << self
	attr_accessor :_envelope_from_indicies
	private :_envelope_from_indicies, :_envelope_from_indicies=
end
self._envelope_from_indicies = [
	0, 2, 0, 4, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 6, 1, 
	0, 0, 1, 7, 8, 7, 3, 9, 
	0, 3, 10, 11, 12, 13, 14, 15, 
	3, 3, 3, 3, 3, 1, 7, 8, 
	7, 9, 0, 10, 16, 17, 18, 19, 
	20, 1, 21, 1, 7, 7, 1, 22, 
	7, 23, 9, 9, 9, 1, 24, 1, 
	9, 9, 1, 1, 9, 10, 25, 10, 
	26, 27, 26, 26, 26, 28, 26, 26, 
	26, 26, 26, 1, 29, 1, 10, 10, 
	1, 30, 31, 30, 26, 32, 33, 26, 
	26, 34, 35, 36, 37, 38, 26, 26, 
	26, 26, 26, 1, 30, 31, 30, 32, 
	33, 16, 17, 18, 19, 20, 1, 39, 
	1, 30, 30, 1, 40, 30, 41, 32, 
	32, 32, 1, 42, 1, 32, 32, 1, 
	32, 1, 33, 43, 33, 26, 44, 26, 
	26, 26, 26, 26, 26, 26, 26, 1, 
	45, 1, 33, 33, 1, 46, 33, 47, 
	44, 44, 44, 1, 48, 1, 44, 44, 
	1, 1, 44, 49, 1, 50, 1, 51, 
	1, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 1, 60, 61, 1, 62, 1, 
	63, 1, 63, 64, 63, 65, 66, 1, 
	67, 1, 63, 63, 1, 68, 63, 69, 
	65, 65, 65, 1, 70, 1, 65, 65, 
	1, 65, 1, 71, 72, 73, 74, 71, 
	1, 71, 72, 73, 74, 1, 75, 1, 
	71, 71, 1, 73, 76, 73, 77, 78, 
	1, 79, 1, 73, 73, 1, 80, 73, 
	81, 77, 77, 77, 1, 82, 1, 77, 
	77, 1, 77, 1, 83, 1, 83, 84, 
	83, 85, 86, 1, 87, 1, 83, 83, 
	1, 88, 83, 89, 85, 85, 85, 1, 
	90, 1, 85, 85, 1, 85, 1, 86, 
	91, 86, 92, 93, 1, 94, 1, 86, 
	86, 1, 95, 86, 96, 92, 92, 92, 
	1, 97, 1, 92, 92, 1, 1, 92, 
	98, 1, 98, 99, 100, 101, 102, 1, 
	103, 1, 98, 98, 1, 100, 104, 100, 
	105, 102, 106, 1, 107, 1, 100, 100, 
	1, 108, 100, 109, 105, 105, 105, 1, 
	110, 1, 105, 105, 1, 1, 105, 111, 
	1, 112, 1, 113, 113, 1, 115, 113, 
	116, 114, 114, 114, 1, 117, 1, 114, 
	114, 1, 114, 1, 102, 118, 102, 119, 
	120, 1, 121, 1, 102, 102, 1, 122, 
	102, 123, 119, 119, 119, 1, 124, 1, 
	119, 119, 1, 1, 119, 125, 1, 125, 
	126, 127, 128, 1, 129, 1, 125, 125, 
	1, 127, 130, 127, 131, 106, 1, 132, 
	1, 127, 127, 1, 133, 127, 134, 131, 
	131, 131, 1, 135, 1, 131, 131, 1, 
	1, 131, 136, 125, 137, 128, 128, 128, 
	1, 138, 1, 128, 128, 1, 128, 1, 
	139, 98, 140, 101, 101, 101, 1, 141, 
	1, 101, 101, 1, 1, 101, 142, 71, 
	143, 74, 74, 74, 1, 144, 1, 74, 
	74, 1, 74, 1, 62, 1, 145, 1, 
	62, 1, 146, 1, 62, 1, 147, 148, 
	1, 62, 1, 62, 62, 1, 149, 1, 
	62, 62, 1, 150, 1, 62, 1, 151, 
	1, 62, 1, 152, 1, 62, 1, 153, 
	1, 50, 1, 154, 153, 1, 50, 1, 
	155, 156, 1, 50, 1, 50, 1, 157, 
	1, 50, 1, 30, 31, 30, 26, 32, 
	33, 26, 26, 34, 35, 36, 37, 38, 
	158, 26, 26, 26, 26, 26, 1, 30, 
	31, 30, 26, 32, 33, 26, 26, 34, 
	35, 36, 37, 38, 159, 26, 26, 26, 
	26, 26, 1, 30, 31, 30, 26, 32, 
	33, 26, 26, 34, 35, 36, 37, 38, 
	160, 159, 26, 26, 26, 26, 26, 1, 
	30, 31, 30, 26, 32, 33, 26, 26, 
	34, 35, 36, 37, 38, 161, 162, 26, 
	26, 26, 26, 26, 1, 30, 31, 30, 
	26, 32, 33, 26, 26, 34, 35, 36, 
	37, 38, 163, 26, 26, 26, 26, 26, 
	1, 30, 31, 30, 26, 32, 33, 26, 
	26, 34, 35, 36, 37, 38, 164, 26, 
	26, 26, 26, 26, 1, 30, 31, 165, 
	26, 32, 33, 26, 26, 34, 35, 36, 
	37, 38, 26, 26, 26, 26, 26, 1, 
	30, 31, 165, 32, 33, 52, 53, 166, 
	55, 167, 57, 58, 168, 19, 20, 1, 
	146, 49, 1, 149, 153, 1, 154, 152, 
	153, 1, 30, 31, 30, 26, 32, 33, 
	26, 26, 34, 35, 36, 37, 38, 164, 
	26, 26, 26, 26, 26, 1, 30, 31, 
	30, 26, 32, 33, 26, 26, 34, 35, 
	36, 37, 38, 164, 26, 26, 26, 26, 
	26, 1, 30, 31, 30, 26, 32, 33, 
	26, 26, 34, 35, 36, 37, 38, 164, 
	26, 26, 26, 26, 26, 1, 30, 31, 
	30, 26, 32, 33, 26, 26, 34, 35, 
	36, 37, 38, 164, 26, 26, 26, 26, 
	26, 1, 30, 31, 30, 26, 32, 33, 
	26, 26, 34, 35, 36, 37, 38, 164, 
	26, 26, 26, 26, 26, 1, 169, 10, 
	170, 27, 27, 27, 1, 171, 1, 27, 
	27, 1, 1, 27, 172, 173, 174, 28, 
	28, 28, 1, 175, 1, 28, 28, 1, 
	1, 28, 174, 176, 174, 177, 16, 17, 
	18, 19, 20, 1, 178, 1, 174, 174, 
	1, 179, 174, 180, 177, 177, 177, 1, 
	181, 1, 177, 177, 1, 177, 1, 7, 
	8, 7, 3, 9, 0, 3, 10, 11, 
	12, 13, 14, 15, 182, 3, 3, 3, 
	3, 3, 1, 7, 8, 7, 3, 9, 
	0, 3, 10, 11, 12, 13, 14, 15, 
	183, 3, 3, 3, 3, 3, 1, 7, 
	8, 7, 3, 9, 0, 3, 10, 11, 
	12, 13, 14, 15, 184, 183, 3, 3, 
	3, 3, 3, 1, 7, 8, 7, 3, 
	9, 0, 3, 10, 11, 12, 13, 14, 
	15, 185, 186, 3, 3, 3, 3, 3, 
	1, 7, 8, 7, 3, 9, 0, 3, 
	10, 11, 12, 13, 14, 15, 187, 3, 
	3, 3, 3, 3, 1, 7, 8, 7, 
	3, 9, 0, 3, 10, 11, 12, 13, 
	14, 15, 188, 3, 3, 3, 3, 3, 
	1, 7, 8, 189, 3, 9, 0, 3, 
	10, 11, 12, 13, 14, 15, 3, 3, 
	3, 3, 3, 1, 7, 8, 189, 9, 
	0, 10, 52, 53, 166, 55, 167, 57, 
	58, 168, 19, 20, 1, 7, 8, 7, 
	3, 9, 0, 3, 10, 11, 12, 13, 
	14, 15, 188, 3, 3, 3, 3, 3, 
	1, 7, 8, 7, 3, 9, 0, 3, 
	10, 11, 12, 13, 14, 15, 188, 3, 
	3, 3, 3, 3, 1, 7, 8, 7, 
	3, 9, 0, 3, 10, 11, 12, 13, 
	14, 15, 188, 3, 3, 3, 3, 3, 
	1, 7, 8, 7, 3, 9, 0, 3, 
	10, 11, 12, 13, 14, 15, 188, 3, 
	3, 3, 3, 3, 1, 7, 8, 7, 
	3, 9, 0, 3, 10, 11, 12, 13, 
	14, 15, 188, 3, 3, 3, 3, 3, 
	1, 191, 192, 191, 193, 190, 190, 190, 
	1, 195, 196, 197, 194, 194, 1, 198, 
	1, 194, 194, 1, 1, 194, 199, 200, 
	199, 197, 194, 194, 194, 1, 201, 1, 
	199, 199, 1, 202, 0, 203, 5, 5, 
	5, 1, 204, 1, 5, 5, 1, 1, 
	5, 113, 205, 113, 114, 111, 1, 113, 
	205, 113, 114, 1, 0
]

class << self
	attr_accessor :_envelope_from_trans_targs
	private :_envelope_from_trans_targs, :_envelope_from_trans_targs=
end
self._envelope_from_trans_targs = [
	1, 0, 2, 4, 187, 195, 3, 5, 
	6, 8, 12, 174, 175, 176, 177, 178, 
	30, 134, 136, 138, 141, 7, 9, 11, 
	10, 13, 15, 159, 163, 14, 16, 17, 
	19, 23, 143, 144, 145, 146, 147, 18, 
	20, 22, 21, 24, 26, 25, 27, 29, 
	28, 31, 32, 33, 34, 119, 121, 123, 
	126, 128, 130, 132, 35, 118, 36, 37, 
	38, 40, 44, 39, 41, 43, 42, 45, 
	46, 48, 114, 47, 49, 51, 55, 50, 
	52, 54, 53, 56, 57, 59, 63, 58, 
	60, 62, 61, 64, 66, 70, 65, 67, 
	69, 68, 71, 72, 74, 110, 88, 73, 
	75, 77, 81, 76, 78, 80, 79, 199, 
	83, 200, 84, 85, 87, 86, 89, 91, 
	95, 90, 92, 94, 93, 96, 97, 99, 
	106, 98, 100, 102, 101, 103, 105, 104, 
	107, 109, 108, 111, 113, 112, 115, 117, 
	116, 120, 122, 124, 125, 127, 129, 131, 
	133, 135, 137, 139, 140, 142, 158, 157, 
	156, 154, 155, 148, 149, 150, 151, 152, 
	153, 160, 162, 161, 164, 166, 167, 165, 
	168, 170, 169, 171, 173, 172, 186, 185, 
	184, 182, 183, 179, 180, 181, 188, 192, 
	193, 191, 188, 189, 5, 191, 190, 192, 
	193, 194, 196, 198, 197, 82
]

class << self
	attr_accessor :_envelope_from_trans_actions
	private :_envelope_from_trans_actions, :_envelope_from_trans_actions=
end
self._envelope_from_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 3, 
	3, 3, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :envelope_from_start
end
self.envelope_from_start = 1;
class << self
	attr_accessor :envelope_from_first_final
end
self.envelope_from_first_final = 199;
class << self
	attr_accessor :envelope_from_error
end
self.envelope_from_error = 0;

class << self
	attr_accessor :envelope_from_en_main
end
self.envelope_from_en_main = 1;


# line 26 "ragel/envelope_from.rl"
        end
        
        def parse(data)
          message_ids = Data::MessageIdsData.new([])

          p = 0
          eof = data.length

          
# line 563 "ragel/envelope_from.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = envelope_from_start
end

# line 35 "ragel/envelope_from.rl"
          
# line 572 "ragel/envelope_from.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _envelope_from_key_offsets[cs]
	_trans = _envelope_from_index_offsets[cs]
	_klen = _envelope_from_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _envelope_from_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _envelope_from_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _envelope_from_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _envelope_from_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _envelope_from_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	_trans = _envelope_from_indicies[_trans]
	cs = _envelope_from_trans_targs[_trans]
	if _envelope_from_trans_actions[_trans] != 0
		_acts = _envelope_from_trans_actions[_trans]
		_nacts = _envelope_from_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _envelope_from_actions[_acts - 1]
when 0 then
# line 7 "ragel/envelope_from.rl"
		begin
 		end
when 1 then
# line 13 "ragel/envelope_from.rl"
		begin
 mark = p 		end
# line 661 "ragel/envelope_from.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 36 "ragel/envelope_from.rl"

          if p != eof
          #  puts "FAILURE"
          #  p data
          #  p data[0..p]
            raise "FAILED TO PARSE" 
          end

          message_ids
        end

        def failure_reason
          "failed"
        end
      end
    end
  end
end
